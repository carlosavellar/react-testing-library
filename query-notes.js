[{"content":"# Query  Functions\n\nAll query functions are accessed through the `screen` object in a test.  These query functions *always* begin with one of the following names: `getBy`, `getAllBy`, `queryBy`, `queryAllBy`, `findBy`, `findAllBy`. \n\n| Start of Function Name | Examples                             |\n|------------------------|--------------------------------------|\n| getBy                  | getByRole, getByText                 |\n| getAllBy               | getAllByText, getByDisplayValue      |\n| queryBy                | queryByDisplayValue, queryByTitle    |\n| queryAllBy             | queryAllByTitle, queryAllByText      |\n| findBy                 | findByRole, findBytext               |\n| findAllBy              | findAllByText, findAllByDisplayValue |\n\nThese names indicate the following:\n\n1. Whether the function will return an element or an array of elements\n2. What happens if the function finds 0, 1, or > 1 of the targeted element\n3. Whether the function runs instantly (synchronously) or looks for an element over a span of time (asynchronously)\n\n\n### Looking for a Single Element?\n\n| Name    | 0 matches | 1 match | > 1 match | Notes                                          |\n|---------|-----------|---------|-----------|------------------------------------------------|\n| getBy   | Throw     | Element | Throw     |                                                |\n| queryBy | null      | Element | Throw     |                                                |\n| findBy  | Throw     | Element | Throw     | Looks for an element over the span of 1 second |\n\n\n### Looking for Multiple Elements?\n\n| Name       | 0 matches | 1 match   | > 1 match | Notes                                        |\n|------------|-----------|-----------|-----------|----------------------------------------------|\n| getAllBy   | Throw     | []Element | []Element |                                              |\n| queryAllBy | [ ]       | []Element | []Element |                                              |\n| findAllBy  | Throw     | []Element | []Element | Looks for elements over the span of 1 second |\n\n\n### When to use each\n\n| Goal of test                           | Use                 |\n|----------------------------------------|---------------------|\n| Prove an element exists                | getBy, getAllBy     |\n| Prove an element does **not** exist        | queryBy, queryAllBy |\n| Make sure an element eventually exists | findBy, findAllBy   |","type":"text","id":"aar6f"},{"content":"const QueryFuncComponent = () => {\n  return (\n      <ul>\n        <li>List 1</li>\n        <li>List 2</li>\n        <li>List 3</li>\n      </ul>\n  );\n};\n\nrender(<QueryFuncComponent />);","type":"code","id":"hksqq"},{"content":"test(\"Testing query function starting by 'query', 'getBy', 'findBy'\",async()=>{\n   render(<QueryFuncComponent />); \n\n   expect(()=>screen.getByRole(\"textbox\")).toThrow();\n\n   expect(screen.queryByRole(\"textbox\")).toEqual(null);\n\n   let thrownError = false;\n\n    try{\n      await screen.findByRole(\"textbox\");\n    }catch(err){\n      thrownError = true;\n    };\n\n    expect(thrownError).toEqual(true);\n\n})","type":"code","id":"gmvt5"},{"content":"const fetchItemList = (resolve) =>{\n  return  Promise.resolve(['Monge', 'a prova', 'de balas']);\n}\n\n","type":"code","id":"qyvgf"},{"content":"import {useState, useEffect } from \"react\";\n\nconst ListComponent = () =>{\n  const [ list, setList ] = useState([]);\n\n  useEffect(()=>{\n    fetchItemList().then(c=> setList(c));\n  }, []);\n\n  const renderItems  = () =>{\n        {list.map(item=>{\n      return <li key={item}>{item}w</li>\n    })}\n  }\n\n  return  <ul>\n\n  </ul>\n}\n\nrender(<ListComponent />)","type":"code","id":"2ggul"},{"content":"test(\"Make sure if the elements are being fetced\", async  ()=>{\n\n  render(<ListComponent />);\n\n  const fechedData = await screen.findAllBy(\"list\")\n}\n);q","type":"code","id":"mfyog"}]